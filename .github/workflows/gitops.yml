name: GitOps CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: az871209/arch

jobs:
  # Detect changes to determine what to build
  changes:
    runs-on: ubuntu-latest
    outputs:
      migration: ${{ steps.changes.outputs.migration }}
      server: ${{ steps.changes.outputs.server }}
      client: ${{ steps.changes.outputs.client }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            migration:
              - 'internal/database/migrations/**'
              - 'Dockerfile.migration'
              - 'sqlc.yaml'
            server:
              - '**'
              - '!client/**'
              - '!internal/database/migrations/**'
              - '!Dockerfile.migration'
              - '!*.md'
            client:
              - 'client/**'
              - 'proto/**'

  build-server-client:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true' || needs.changes.outputs.client == 'true'
    outputs:
      rpc-server-tag: ${{ steps.server-meta.outputs.tags }}
      rpc-client-tag: ${{ steps.client-meta.outputs.tags }}
    strategy:
      matrix:
        include:
          - component: rpc-server
            dockerfile: ./Dockerfile
            context: .
          - component: rpc-client
            dockerfile: ./client/Dockerfile
            context: ./client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for rpc-server
        if: matrix.component == 'rpc-server' && needs.changes.outputs.server == 'true'
        id: server-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=${{ matrix.component }}-
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix=${{ matrix.component }}-

      - name: Extract metadata for rpc-client
        if: matrix.component == 'rpc-client' && needs.changes.outputs.client == 'true'
        id: client-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=${{ matrix.component }}-
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix=${{ matrix.component }}-

      - name: Build and push Docker image
        if: (matrix.component == 'rpc-server' && needs.changes.outputs.server == 'true') || (matrix.component == 'rpc-client' && needs.changes.outputs.client == 'true')
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ matrix.component == 'rpc-server' && steps.server-meta.outputs.tags || steps.client-meta.outputs.tags }}
          labels: ${{ matrix.component == 'rpc-server' && steps.server-meta.outputs.labels || steps.client-meta.outputs.labels }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-migration:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.migration == 'true'
    outputs:
      rpc-migration-tag: ${{ steps.migration-meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for rpc-migration
        id: migration-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=rpc-migration-
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix=rpc-migration-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.migration
          push: true
          tags: ${{ steps.migration-meta.outputs.tags }}
          labels: ${{ steps.migration-meta.outputs.labels }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-manifests:
    needs: [changes, build-server-client, build-migration]
    if: always() && (needs.build-server-client.result == 'success' || needs.build-migration.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout manifest repository
        uses: actions/checkout@v4
        with:
          repository: polo871209/arch-manifest
          token: ${{ secrets.GITHUB_TOKEN }}
          path: manifests

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update image tags using kustomize edit
        run: |
          cd manifests

          # Update app images if they were built
          if [ "${{ needs.changes.outputs.server }}" == "true" ] || [ "${{ needs.changes.outputs.client }}" == "true" ]; then
            cd overlays/dev/app
            
            if [ "${{ needs.changes.outputs.server }}" == "true" ]; then
              SERVER_TAG=$(echo "${{ needs.build-server-client.outputs.rpc-server-tag }}" | head -n1)
              echo "Updating server tag: $SERVER_TAG"
              kustomize edit set image rpc-server="$SERVER_TAG"
            fi
            
            if [ "${{ needs.changes.outputs.client }}" == "true" ]; then
              CLIENT_TAG=$(echo "${{ needs.build-server-client.outputs.rpc-client-tag }}" | head -n1)
              echo "Updating client tag: $CLIENT_TAG"
              kustomize edit set image rpc-client="$CLIENT_TAG"
            fi
            
            cd ../../..
          fi

          # Update migration image if it was built
          if [ "${{ needs.changes.outputs.migration }}" == "true" ]; then
            MIGRATION_TAG=$(echo "${{ needs.build-migration.outputs.rpc-migration-tag }}" | head -n1)
            echo "Updating migration tag: $MIGRATION_TAG"
            cd overlays/dev/app/migration
            kustomize edit set image rpc-migration="$MIGRATION_TAG"
            cd ../../../..
          fi

          # Show changes
          git diff

      - name: Commit and push changes
        run: |
          cd manifests
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet; then
            echo "No changes to commit"
          else
            # Build commit message based on what was updated
            COMMIT_MSG="Update image tags"
            COMMIT_BODY=""
            
            if [ "${{ needs.changes.outputs.server }}" == "true" ]; then
              COMMIT_BODY="$COMMIT_BODY\nrpc-server: ${{ needs.build-server-client.outputs.rpc-server-tag }}"
            fi
            
            if [ "${{ needs.changes.outputs.client }}" == "true" ]; then
              COMMIT_BODY="$COMMIT_BODY\nrpc-client: ${{ needs.build-server-client.outputs.rpc-client-tag }}"
            fi
            
            if [ "${{ needs.changes.outputs.migration }}" == "true" ]; then
              COMMIT_BODY="$COMMIT_BODY\nrpc-migration: ${{ needs.build-migration.outputs.rpc-migration-tag }}"
            fi
            
            git add .
            git commit -m "$COMMIT_MSG$COMMIT_BODY"
            git push
          fi
