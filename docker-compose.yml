services:
  postgres:
    image: postgres:17
    container_name: rpc-postgres
    environment:
      POSTGRES_DB: rpc_dev
      POSTGRES_USER: rpc_user
      POSTGRES_PASSWORD: rpc_password
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./internal/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rpc_user -d rpc_dev"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  valkey:
    image: valkey/valkey:8.0
    container_name: rpc-valkey
    ports:
      - "6380:6379"
    volumes:
      - valkey_data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: valkey-server --appendonly yes

  grpc-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rpc-grpc-server
    ports:
      - "50051:50051"
    environment:
      - DATABASE_URL=postgres://rpc_user:rpc_password@postgres:5432/rpc_dev?sslmode=disable
      - CACHE_URL=valkey://valkey:6379
      - LOG_LEVEL=INFO
      - SERVER_PORT=50051
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    restart: unless-stopped

  fastapi-client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: rpc-fastapi-client
    ports:
      - "8000:8000"
    environment:
      - GRPC_HOST=grpc-server
      - GRPC_PORT=50051
    depends_on:
      - grpc-server
    restart: unless-stopped

volumes:
  postgres_data:
  valkey_data: